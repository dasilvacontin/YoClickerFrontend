<!DOCTYPE html>
<html lang="en">
<title>YoClicker - <%= pollName %></title>
<%- include head.ejs %>
<meta name="viewport" content="minimal-ui">
<style type="text/css">

  .wrapper {
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    padding: 20px;
  }

  .chart {
    width: 100%;
    height: 100%;
    font-size: 20px;
  }

  .kek {
    font-family: 'Montserrat';
    font-size: 30px;
    line-height: 40px;
    text-align: right;
    margin: 15px;
    padding: 0px;
    position: absolute;
    bottom: 0px;
    right: 0px;
    color: white;
    z-index: 10;
  }

</style>
<head>
</head>
<body>
<script src="/js/runOnLoad.js"></script>
<script src="/js/HighchartsAdapter.js" type="text/javascript"></script>
<script src="/js/highcharts.src.js" type="text/javascript"></script>
<script src='/js/yoChartTheme.js'></script>
<p class="kek">YO THIS!<br>SHARE THE RESULTS</p>
<script>

  // answer is an array of size 2,
  // elem index 0 is answer title,
  // elem index 1 is number of votes
  var VOTES = 1;

  function trimAnswers(answers) {

    var hasValidAnswer = false,
        answer;

    for (var i = 0; i < answers.length; ++i) {
      answer = answers[i];
      if (answer[VOTES] > 0) {
        hasValidAnswer = true;
        break;
      }
    }

    if (!hasValidAnswer) return;

    for (var i = answers.length - 1; i >= 0; --i) {
      answer = answers[i];
      if (answer[VOTES] == 0)
        answers.splice(i, 1);
    }

  }

  var questions = JSON.parse(unescape("<%- json %>")).result;
  var question;
  for (var i = 0; questions.length; ++i) {
    question = questions[i];
    trimAnswers(question.answers);
  }

  var charts = [];
  var pollURL = "<%= pollURL %>";

  function newChart(i, question) {

    var uid = 'chart'+i;

    var w = document.createElement('div');
    w.className = 'wrapper';
    w.setAttribute('id', uid);
    document.body.appendChild(w);

    charts.push(new Highcharts.Chart({
    chart : {
      renderTo : uid,
      type     : 'pie'
    },
    credits: {
      enabled: false
    },
    title: {
        text: question.question
    },
    series: [{
      type: 'pie',
      data: question.answers
    }]
    }));

  }

  function updateCharts(questions) {
    console.log("updated charts");
    for (var i = 0; i < questions.length; ++i) {
      question = questions[i];
      trimAnswers(question.answers);
      charts[i].series[0].setData(question.answers);
    }

  }

  // create a new chart
  runOnLoad(function(){

    for (var i = 0; i < questions.length; ++i)
      newChart(i, questions[i]);

    setInterval(function () {

      var pollRequest = new XMLHttpRequest();
      pollRequest.open(
        'GET',
        pollURL,
        true
      );
      //pollRequest.withCredentials = true;
      pollRequest.send();
      pollRequest.onerror = function () {
        console.log("request error");
      }
      pollRequest.onload = function () {
        var json;
        try { json = JSON.parse(pollRequest.responseText); }
        catch (e) { return console.log("backend error"); }
        updateCharts(json.result);
      }

    }, 5000);

  });

</script>
</body>
</html>